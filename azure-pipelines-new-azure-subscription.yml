# Build Docker image for this app using Azure Pipelines
# http://docs.microsoft.com/azure/devops/pipelines/languages/docker?view=vsts
trigger:
- release/*

pr: none

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  imageName: 'medex-cms:$(Build.BuildId)'
  ContainerRegistryName: acrmedexuks

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: 3.5
    architecture: 'x64'

- task: PythonScript@0
  displayName: 'Export project path'
  inputs:
    scriptSource: 'inline'
    script: |
      """Search all subdirectories for `medexCms` module."""
      from glob import iglob
      from os import path
      # Python >= 3.5
      medexCms = next(iglob(path.join('**', 'medexCms'), recursive=True), None)
      if not medexCms:
          raise SystemExit('Could not find the frontend Django project')
      project_location = path.dirname(path.abspath(medexCms))
      print('Found Django project in', project_location)
      print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))

- script: |
    python -m pip install --upgrade pip setuptools wheel django
    pip install -r $(projectRoot)/requirements.txt
    pip install unittest-xml-reporting
  displayName: 'Install prerequisites'

- script: |
    pushd '$(projectRoot)'
    python manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
  condition: succeededOrFailed()
  displayName: 'Run tests'

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: "**/TEST-*.xml"
    testRunTitle: 'Python $(PYTHON_VERSION)'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

- script: |
    pushd '$(projectRoot)'
    docker build -f ./deploy_files/Dockerfile -t $(ContainerRegistryName).azurecr.io/$(imageName) .
    docker login -u $(ContainerRegistryName) -p $pswd $(ContainerRegistryName).azurecr.io
    docker push $(ContainerRegistryName).azurecr.io/$(imageName)
  env:
    pswd: $(ContainerRegistryPassword)
  displayName: 'Build and push Docker image to UAT and PROD container registry'

- task: CopyFiles@2
  inputs:
    SourceFolder: '_templates'
    Contents: '**/*.json'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/templates'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'